#!/usr/bin/env python

import getopt
import os
import sys

import algorithms
import common_functions
from common_functions import err, warn
import common_genome
import common_logs
import datalib
import iterators

DEFAULT_EPOCH = 10000


####################################################################################
###
### main()
###
####################################################################################
def main():
    epoch_len = DEFAULT_EPOCH
    nbins = 8
    nbins_age = 20


    shortopts = ''
    longopts = ['epoch=']

    try:
        opts, args = getopt.getopt( sys.argv[1:], shortopts, longopts )
    except getopt.GetoptError, e:
        show_usage( e )

    for opt, val in opts:
        if opt == '--epoch':
            try:
                epoch_len = int(val)
            except:
                show_usage("Invalid epoch (%s). Expecting integer." % val)
            if epoch_len <= 0:
                show_usage("Epoch must be > 0")

    if len(args) < 2:
        show_usage("Missing arguments")

    mode = args[0]
    arg_paths = args[1:]

    if mode == 'c': # contacts binning (takes long time)
        subpath_log = 'events/contacts.log'
    elif mode == 'b': # bias
        subpath_log = 'events/contacts_bins.txt'
    elif mode == 'n': # near/far
        subpath_log = 'events/contacts_bias_2bin.txt'
    elif mode == 'fixpickup':
        subpath_log = 'PickupLog.txt'
    else:
        show_usage("invalid mode (%s)" % mode)

    try:
        run_paths = common_functions.find_run_paths( arg_paths,
                                                     subpath_log )
    except:
        show_usage(str(sys.exc_info()[1]))

    for run in run_paths:
        path = os.path.join(run, subpath_log)

        if mode == 'c':
            calc_contacts( path,
                           run,
                           epoch_len,
                           nbins,
                           nbins_age)
        elif mode == 'b':
            path_2bin = os.path.join( run, 'events/contacts_bins_2bin.txt' )
            calc_2bin( path,
                       path_2bin )
            path_total = os.path.join( run, 'events/contacts_total.txt' )
            calc_total( path,
                       path_total )
            calc_bias( path_2bin,
                       os.path.join(run, 'events/contacts_bias_2bin.txt') )
            calc_bias( path_total,
                       os.path.join(run, 'events/contacts_bias_total.txt') )
            calc_bias( path,
                       os.path.join(run, 'events/contacts_bias.txt') )
        elif mode == 'n':
            calc_nearfar( os.path.join(run, 'events/contacts_bins_2bin.txt'),
                          os.path.join(run, 'events/contacts_bins_nearfar.txt') )
            calc_nearfar( os.path.join(run, 'events/contacts_bias_2bin.txt'),
                          os.path.join(run, 'events/contacts_bias_nearfar.txt') )
        elif mode == 'fixpickup':
            fixpickup( path,
                       os.path.join(run, 'events/carry.log') )
        else:
            assert( False )


####################################################################################
###
### FUNCTION getbin()
###
####################################################################################
def getbin(value, lo, hi, nbins):
    bin = int((float(value - lo)/(hi - lo))*nbins)
    if bin >= nbins:
        bin -= 1
    return bin

####################################################################################
###
### FUNCTION create_bins()
###
####################################################################################
def create_bins(values, nbins, lo = None, hi = None):
    if len(values) == 0:
        return [0 for x in range(nbins)]

    if lo == None: lo = min(values)
    if hi == None: hi = max(values)
        
    bins = [0 for x in range(nbins)]
    for value in values:
        bin = getbin(value, lo, hi, nbins)
        bins[bin] += 1
     
    # convert to percent
    #bins = [100 * x / len(values) for x in bins]

    return bins

####################################################################################
###
### FUNCTION create_bins2D()
###
####################################################################################
def create_bins2D(xvalues, xnbins, xlo, xhi,
                  yvalues, ynbins, ylo, yhi):
    n = len(xvalues)
    assert( len(xvalues) == len(yvalues) )

    if xlo == None: xlo = min(xvalues)
    if xhi == None: xhi = max(xvalues)
    if ylo == None: ylo = min(yvalues)
    if yhi == None: yhi = max(yvalues)
    
    bins = [ [0 for x in range(xnbins)] for y in range(ynbins) ]

    for i in range(n):
        x = xvalues[i]
        y = yvalues[i]
        xbin = getbin(x, xlo, xhi, xnbins)
        ybin = getbin(y, ylo, yhi, ynbins)
        bins[ybin][xbin] += 1

    return bins


####################################################################################
###
### function list_subtract()
###
####################################################################################
def list_subtract(x,y):
    assert(len(x) == len(y))

    return [x[i] - y[i] for i in range(len(x))]

####################################################################################
###
### function list_divide()
###
####################################################################################
def list_divide(x,y):
    assert(len(x) == len(y))

    return [float(x[i]) / float(y[i]) if y[i] != 0 else float('nan') for i in range(len(x))]

####################################################################################
###
### CONTACT SYMBOLS
###
####################################################################################

# key = Major, values = Minor
CONTACT_SYMBOLS = {'C': [],
                   'M': ['p','c','w','e','f','d','x','m'],
                   'F': ['c','s','p'],
                   'G': ['c','e']}

CONTACT_META = ['_any', '_fail']

def contactEventHasMeta( major ):
    return major != 'C'

def contactMetaEventTypes( major ):
    if contactEventHasMeta( major ):
        return map(lambda x: major + x, CONTACT_META)
    else:
        return []

def contactEventTypes( major ):
    return [major] + map( lambda x: major + x, CONTACT_SYMBOLS[major] ) + contactMetaEventTypes( major )

####################################################################################
###
### function calc_contacts()
###
####################################################################################
def calc_contacts( path_log,
                   path_run,
                   epoch_len,
                   nbins,
                   nbins_age):
    print 'reading separations'
    separations = common_genome.SeparationCache( path_run )
    print 'reading lifespans'
    lifespans = common_logs.LifeSpans( path_run )

    min_separation, max_separation = separations.getBounds()
    max_age = lifespans.getBounds()[1]

    print 'min_separation =', min_separation
    print 'max_separation =', max_separation
    print 'max_age =', max_age

    class Event:
        def __init__(self, name):
            self.name = name
            self.separations = []
            self.ages_subject = []
            self.ages_object = []

        def add(self, separation, age_subject, age_object):
            self.separations.append(separation)
            self.ages_subject.append(age_subject)
            self.ages_object.append(age_object)

        def compute(self):
            print '  computing event', self.name
            
            self.bins_separations = create_bins(self.separations, nbins, min_separation, max_separation)
            self.bins_subject = create_bins(self.ages_subject, nbins_age, 0, max_age)
            self.bins_subject2D = create_bins2D(self.ages_subject, nbins_age, 0, max_age,
                                                self.separations, nbins, min_separation, max_separation )
            self.bins_object = create_bins(self.ages_object, nbins_age, 0, max_age)
            self.bins_object2D = create_bins2D(self.ages_object, nbins_age, 0, max_age,
                                               self.separations, nbins, min_separation, max_separation )

            # clear these fields out so they're not taking up memory
            del self.separations
            del self.ages_subject
            del self.ages_object

        def createTables(self, tables, step):
            self.createTable( tables, step, 'separations', self.bins_separations )
            self.createTable( tables, step, 'subject', self.bins_subject )
            self.createTable( tables, step, 'object', self.bins_object )

            self.createTable2D( tables, step, 'subject2D', self.bins_subject2D )
            self.createTable2D( tables, step, 'object2D', self.bins_object2D )

        def createTable(self, tables, step, tablename, values):
            tablename = tablename + "_" + self.name
            nbins = len(values)
            
            try:
                table = tables[tablename]
            except:
                colnames = ['T'] + ['bin%d' % i for i in range(nbins)]
                coltypes = ['int'] + ['int' for i in range(nbins)]
                table = datalib.Table(tablename, colnames, coltypes)
                tables[tablename] = table
            
            row = table.createRow()

            row['T'] = step
            for i in range(nbins):
                row['bin%d' % i] = values[i]

        def createTable2D(self, tables, step, tablename, values2D):
            n = len(values2D)

            for i in range(n):
                self.createTable(tables, step, tablename+'_bin'+str(i), values2D[i])

    class Epoch:
        def __init__(self, step):
            self.step = step
            self.events = {}

            # construct dict from event name to event object
            for major in CONTACT_SYMBOLS.keys():
                for eventType in contactEventTypes( major ):
                    self.events[eventType] = Event(eventType)

        def compute(self):
            print 'computing epoch', self.step
            for ev in self.events.values():
                ev.compute()

        def createTables(self, tables):
            for ev in self.events.values():
                ev.createTables(tables, self.step)

    # This class is just a place for us to keep references to variables
    # that are accessed as "l-values" from inner functions.
    class local:
        epoch = Epoch(1)
        epochs = [epoch]

    # ---------------------------------- #
    # --- datalib.parse stream_row() --- #
    # ---------------------------------- #
    # Note this is a callback function passed to datalib.parse() further on.
    def __row(row):
        step = row['Timestep']
        agent1 = row['Agent1']
        agent2 = row['Agent2']
        eventSymbols = row['Events']
        separation = separations.separation( agent1, agent2 )

        while step >= (local.epoch.step + epoch_len):
            # we do a loop here because it's conceivable that
            # we'll have an epoch without events. Extremely unlikely,
            # but we don't want a crash.
            local.epoch.compute()
            local.epoch = Epoch(local.epoch.step + epoch_len)
            local.epochs.append(local.epoch)

        age_agent1 = lifespans.age( agent1, step )
        age_agent2 = lifespans.age( agent2, step )
        age_subject = age_agent1
        age_object = age_agent2

        eventMajor = None
        haveEventMinor = False

        def __addEvent(eventName):
            local.epoch.events[eventName].add(separation, age_subject, age_object)

        for eventSymbol in eventSymbols:
            if eventSymbol.islower():
                __addEvent( eventMajor + eventSymbol )
                if contactEventHasMeta( eventMajor ) and not haveEventMinor:
                    __addEvent( eventMajor + '_fail' )
                haveEventMinor = True
            else:
                if eventMajor and not haveEventMinor:
                    __addEvent( eventMajor )

                eventMajor = eventSymbol
                haveEventMinor = False

                if contactEventHasMeta( eventMajor ):
                    __addEvent( eventMajor + '_any' )

            if eventSymbol == 'C':
                # erm, not sure about subject/object age-tracking
                # on the 'C' event itself... definitely need to switch
                # them though for the events after the 'C'
                age_subject = age_agent2
                age_object = age_agent1

        if eventMajor and not haveEventMinor:
            __addEvent( eventMajor )

    # ---------------------------------- #
    # --- datalib.parse stream_row() --- #
    # ---------------------------------- #

    # Parse the durned thing, using __row() to process each row.
    table_contacts = datalib.parse( path_log, tablenames = ['Contacts'], stream_row = __row )

    # do computation on final epoch
    local.epoch.compute()

    # Let's make a durned output file, eh?
    tables = {}

    for epoch in local.epochs:
        epoch.createTables(tables)

    path_output = os.path.join(path_run, 'events/contacts_bins.txt')

    datalib.write( path_output, tables )


####################################################################################
###
### function calc_bias()
###
####################################################################################
def calc_bias( path_log,
               path_out ):
    tables_bins = datalib.parse( path_log )


    def __div( table_x, table_y, tablename_result ):
        assert( table_x.colnames == table_y.colnames )
        assert( table_x.coltypes == table_y.coltypes )

        colnames = table_x.colnames

        assert(colnames[0] == 'T')
        coltypes = ['int'] + ['float' for x in range(len(table_x.coltypes) - 1)]

        table_result = datalib.Table( tablename_result,
                                      colnames,
                                      coltypes )

        for row_x, row_y in iterators.IteratorUnion( iter(table_x.rows()), iter(table_y.rows()) ):
            t = row_x['T']
            assert( t == row_y['T'] )

            row_result = table_result.createRow()

            row_result['T'] = t

            for colname in table_x.colnames[1:]:
                val_x = row_x[colname]
                val_y = row_y[colname]

                if val_y == 0:
                    row_result.set( colname, float('nan') )
                else:
                    row_result.set( colname, float(val_x) / float(val_y) )
        
        return table_result

    tables_bias = []

    def __bias( majorx, majory ):
        for eventx in contactEventTypes( majorx ):
            tablex = tables_bins['separations_'+eventx]
            for eventy in contactEventTypes( majory):
                if eventx != eventy:
                    tabley = tables_bins['separations_'+eventy]

                    bias = __div( tablex, tabley, eventx + '/' + eventy )
                    tables_bias.append( bias )

    __bias( 'F', 'C' )
    __bias( 'M', 'C' )
    __bias( 'G', 'C' )
    __bias( 'G', 'F' )

    __bias( 'M', 'M' )
    __bias( 'F', 'F' )
    __bias( 'G', 'G' )

    datalib.write( path_out, tables_bias )

####################################################################################
###
### function calc_2bin()
###
####################################################################################
def calc_2bin( path_in, path_out ):
    tables_in = datalib.parse( path_in )
    tables_out = []

    for table_in in tables_in.values():
        assert( table_in.colnames[0] == 'T' )

        n = len(table_in.colnames) - 1
        assert( n % 2 == 0 )
        assert( table_in.coltypes[1] == 'int' )

        colnames = ['T', 'bin0', 'bin1']
        coltypes = ['int', 'int', 'int']

        table_out = datalib.Table( table_in.name,
                                   colnames,
                                   coltypes )

        for row_in in table_in.rows():
            row_out = table_out.createRow()

            row_out['T'] = row_in['T']

            bin0 = 0
            for i in range(n/2):
                bin0 += row_in['bin%d'%i]
                
            bin1 = 0
            for i in range(n/2, n):
                bin1 += row_in['bin%d'%i]

            row_out['bin0'] = bin0
            row_out['bin1'] = bin1

        tables_out.append( table_out )

    datalib.write( path_out, tables_out )
    

####################################################################################
###
### function calc_total()
###
####################################################################################
def calc_total( path_in, path_out ):
    tables_in = datalib.parse( path_in )
    tables_out = []

    for table_in in tables_in.values():
        assert( table_in.colnames[0] == 'T' )

        n = len(table_in.colnames) - 1
        assert( table_in.coltypes[1] == 'int' )

        colnames = ['T', 'total']
        coltypes = ['int', 'int']

        table_out = datalib.Table( table_in.name,
                                   colnames,
                                   coltypes )

        for row_in in table_in.rows():
            row_out = table_out.createRow()

            row_out['T'] = row_in['T']

            total = 0
            for i in range(n):
                total += row_in['bin%d'%i]

            row_out['total'] = total

        tables_out.append( table_out )

    datalib.write( path_out, tables_out )
    

####################################################################################
###
### function calc_nearfar()
###
####################################################################################
def calc_nearfar( path_in,
                  path_out ):
    tables_in = datalib.parse( path_in )
    tables_out = []

    for table_in in tables_in.values():
        assert( table_in.colnames[0] == 'T' )

        assert( len(table_in.colnames) == 3 )

        colnames = ['T', 'ratio']
        coltypes = ['int', 'float']

        table_out = datalib.Table( table_in.name,
                                   colnames,
                                   coltypes )

        for row_in in table_in.rows():
            row_out = table_out.createRow()

            row_out['T'] = row_in['T']

            bin0 = float( row_in['bin0'] )
            bin1 = float( row_in['bin1'] )
            
            if bin1 == 0:
                row_out['ratio'] = float('nan')
            else:
                row_out['ratio'] = bin0 / bin1

        tables_out.append( table_out )

    datalib.write( path_out, tables_out )

####################################################################################
###
### function fixpickup()
###
####################################################################################
def fixpickup( path_in,
               path_out ):

    colnames = ['T', 'Agent', 'Action', 'ObjectType', 'ObjectNumber']
    coltypes = ['int', 'int', 'string', 'string', 'int']

    table = datalib.Table( 'Carry', colnames, coltypes )

    actions = {'dropped': 'Do', 'dropped-rc': 'D', 'picked': 'P'}
    types = {'agent': 'A', 'food': 'F', 'brick': 'B'}

    for line in open(path_in):
        tokens = line.split()
        time = tokens[0].split('=')[1]
        agent = tokens[2]
        action = tokens[3]

        token_skip = 1

        if action == 'dropped':
            if tokens[4] == 'rc':
                action = 'dropped-rc'
            else:
                token_skip = 0

        object_type = tokens[4 + token_skip]
        object_num = tokens[6 + token_skip].rstrip(',')

        row = table.createRow()

        row['T'] = int(time)
        row['Agent'] = int(agent)
        row['Action'] = actions[action]
        row['ObjectType'] = types[object_type]
        row['ObjectNumber'] = int(object_num)
        
    datalib.write( path_out,
                   table,
                   randomAccess = False )
            
                                  
####################################################################################
###
### function show_usage()
###
####################################################################################

# 80 columns:
################################################################################
def show_usage(msg = None):
    print """\
USAGE

     CalcEvents [option]... mode <directory>...

DESCRIPTION

     Performs a variety of analysis tasks on logs in run/events.

     Valid modes are:

       c : bin contacts log (takes long time)

       b : contacts bias and 2bin (requires output of mode c)

       n : contacts near/far (requires output of mode b)

       fixpickup : convert old pickup log to datalib carry log

OPTIONS

     --epoch <steps>
               Length of epochs. Used by mode c.

               (default %d)
""" % (DEFAULT_EPOCH)
    
    if msg:
        print str(msg)

    sys.exit(1)

main()
