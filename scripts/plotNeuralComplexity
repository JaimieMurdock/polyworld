#!/usr/bin/python

import copy, getopt, os, re, sys
import datalib, plotlib

import common_functions
from common_functions import err, warn, expand_macros
import complexity_common

INPUT_PLOT_FILENAME = complexity_common.FILENAME_AVR
RECENT_TYPES = common_functions.RECENT_TYPES

####################################################################################
###
### FUNCTION main()
###
####################################################################################
def main():
    #---
    #--- Process command-line arguments
    #---
    options, complexities, recent_type, arg_paths = parse_args(sys.argv[1:])
    
    try:
        run_paths = common_functions.find_run_paths(arg_paths,
                                                    input_subpath(recent_type))
    except common_functions.InvalidDirError, e:
        show_usage(str(e))

    arg_dirs = common_functions.truncate_paths(arg_paths)
    run_dirs = common_functions.truncate_paths(run_paths)

    #---
    #--- Create macros
    #---
    macros = get_macros(arg_paths, arg_dirs, run_paths, run_dirs, recent_type, complexities)
    
    #---
    #--- parse all the input files
    #---
    avrs = {'std': {}}

    for run_path in run_paths:
        avr_path = input_path(run_path, recent_type)
        avrs_path = avrs['std'][avr_path] = {}
        try:
            avrs_parsed = datalib.parse(avr_path,
                                        complexities,
                                        datalib.REQUIRED)
        except datalib.InvalidFileError, x:
            err('Invalid Avr file. ' + str(x))
        except datalib.MissingTableError, x:
            err('Invalid Avr file. ' + str(x))

        # Check which tables contain data
        for c, table in avrs_parsed.items():
            if len(table.rows()) > 0:
                avrs_path[c] = table
            else:
                # if one of the tables doesn't have data, none of them will
                # so discontinue processing this file.
                warn('No data found in %s' % avr_path)
                avrs_path.clear()
                break

        if len(avrs_path) == 0:
            del avrs['std'][avr_path]

    #---
    #--- if meta plot options were specified, compute meta information
    #---
    if options['meta'].nset > 0:
        if len(avrs['std']) < 2:
            warn('Not enough runs to perform meta averaging.')
        else:
            try:
                mopts = options['meta']

                if mopts.get('mean'):
                    compute_meta_avr(avrs, 'mean')
                    mopts_mean = options['meta-mean'] = copy.deepcopy(mopts)
                    mopts_mean.set('max', False)

                if mopts.get('max'):
                    compute_meta_avr(avrs, 'max')
                    mopts_max = options['meta-max'] = copy.deepcopy(mopts)
                    mopts_max.set('mean', False)
            except IncompatibleTimestepsError, e:
                warn('Timesteps incompatible for meta averaging.')
    
    #---
    #--- do the plotting!
    #---
    gopts = options['global']

    doc = plotlib.Document()
    doc.nocolor = gopts.get('nocolor')

    title = expand_macros(gopts.get('title', '{TITLE}'), macros)
    plot = doc.createPlot(title)

    plot.xlabel = expand_macros(gopts.get('xlabel', '{XLABEL}'), macros)
    plot.ylabel = expand_macros(gopts.get('ylabel', '{YLABEL}'), macros)

    plot.legend = not gopts.get('nolegend')
    
    colordict = {}

    if len(run_paths) < 2:
        pathdict = None
    else:
        pathdict = dict([(run_paths[i], run_dirs[i]) for i in range(len(run_paths))])

    for classname, avrs_complexities in avrs.items():
        for path, tables in avrs_complexities.items():
            for c, table in tables.items():
                create_curves(doc,
                              plot,
                              colordict,
                              pathdict,
                              recent_type,
                              options,
                              classname,
                              table)


    #---
    #--- create/show the plot document
    #---
    path_doc = options['global'].get('output',
                                     '/tmp/plotNeuralComplexity-%d.eps' % os.getpid())
    path_doc, path_script = doc.save(path_doc)
    
    if not gopts.get('noview'):
        os.system('%s %s' % (common_functions.pw_env('open'),
                             path_doc))

    return 0

####################################################################################
###
### CLASS Options
###
####################################################################################
class Options:
    FLAGS_GLOBAL = {'p': 'points',
                    'points': 'points',
                    's': 'smooth',
                    'smooth': 'smooth',
                    'l': 'nolegend',
                    'nolegend': 'nolegend',
                    'v': 'noview',
                    'noview': 'noview',
                    'c': 'nocolor',
                    'nocolor': 'nocolor'}
    ARGS_GLOBAL = {'C': 'complexity',
                   'o': 'output',
                   'title': 'title',
                   'xlabel': 'xlabel',
                   'ylabel': 'ylabel'}

    FLAGS = {'w': 'whiskers',
             'whiskers': 'whiskers',
             'm': 'mean',
             'mean': 'mean',
             'e': 'errorbars',
             'err': 'errorbars',
             'x': 'max',
             'max': 'max'}

    def __init__(self, type):
        if type == 'global':
            self.flags = Options.FLAGS_GLOBAL
            self.args = Options.ARGS_GLOBAL
        elif type == 'std':
            self.flags = Options.FLAGS
            self.args = {}
        elif type == 'meta':
            self.flags = dict([(x[0].capitalize(), x[1]) for x in Options.FLAGS.items()])
            self.args = {}
        else:
            assert(False)

        self.settings = dict([(name, False) for name in self.flags.values()])
        self.nset = 0

    def get(self, setting_name, default = None):
        try:
            return self.settings[setting_name]
        except KeyError, e:
            if default != None:
                return default
            else:
                raise e

    def set(self, setting_name, value, count = True):
        self.settings[setting_name] = value
        if count:
            self.nset += 1

    def process_opt(self, opt, value):
        if opt in self.flags.keys():
            self.set(self.flags[opt], True)
            return True
        elif opt in self.args.keys():
            self.set(self.args[opt], value)
            return True
        else:
            return False

####################################################################################
###
### FUNCTION getopts_encoding()
###
####################################################################################
def getopts_encoding(options):
    short = ""
    long = []

    for opts in options:
        for flag in opts.flags.keys():
            if len(flag) == 1:
                short += flag
            else:
                long.append(flag)

        for arg in opts.args.keys():
            if len(arg) == 1:
                short += arg + ":"
            else:
                long.append(arg + "=")

    return short, long

####################################################################################
###
### FUNCTION parse_args()
###
####################################################################################
def parse_args(argv):
    if len(argv) == 0:
        show_usage()

    complexities = []
    paths = []
    options = {'global': Options('global'),
               'std': Options('std'),
               'meta': Options('meta')}

    try:
        short, long = getopts_encoding(options.values())
                        
        opts, args = getopt.getopt(argv, short, long)
    except getopt.GetoptError, e:
        show_usage(str(e))

    # process options
    for opt, value in opts:
        opt = opt.strip('-')

        processed = False
        for f in options.values():
            processed = f.process_opt(opt, value)
            if processed:
                break

        if not processed:
            assert(False)


    # process complexities
    complexities = options['global'].get('complexity', 'P').split(',')

    # determine recent type
    if len(args) == 0:
        show_usage('Must specify recent type (%s).' % ','.join(RECENT_TYPES))

    recent_type = args.pop(0)
    if not recent_type in RECENT_TYPES:
        show_usage('Invalid recent type (%s).' % recent_type)

    # process paths
    for path in args:
        paths.append(path)

    if len(paths) == 0:
        show_usage("Must provide a directory.")

    # default plot if none specified
    if options['std'].nset == 0 and options['meta'].nset == 0:
        options['std'].set('mean', True)

    return options, complexities, recent_type, paths

####################################################################################
###
### FUNCTION input_subpath()
###
####################################################################################
def input_subpath(recent_type):
    return os.path.join('brain', recent_type, INPUT_PLOT_FILENAME)

####################################################################################
###
### FUNCTION input_path()
###
####################################################################################
def input_path(path_run, recent_type):
    return os.path.join(path_run, input_subpath(recent_type))

####################################################################################
###
### FUNCTION run_path()
###
####################################################################################
def run_path(path_input, recent_type):
    suffix = os.path.join('brain', recent_type, INPUT_PLOT_FILENAME)

    return path_input[:-(len(suffix) + 1)]

####################################################################################
###
### FUNCTION get_macros()
###
####################################################################################
def get_macros(arg_paths, arg_dirs, run_paths, run_dirs, recent_type, complexities):
    return {'TITLE': '{RECENT} -- {RUN_DIRS}',
            'XLABEL': 'Timestep',
            'YLABEL': 'Complexity ({COMPLEXITY_NAMES})',
            'ARG_DIRS': ', '.join(arg_dirs),
            'RUN_DIRS': ', '.join(run_dirs),
            'ARG_PATHS': ', '.join(arg_paths),
            'RUN_PATHS': ', '.join(run_paths),
            'RECENT': recent_type,
            'COMPLEXITY_TYPES': ', '.join(complexities),
            'COMPLEXITY_NAMES': ', '.join(complexity_common.get_names(complexities))}

####################################################################################
###
### FUNCTION compute_meta_avr
###
####################################################################################
def compute_meta_avr(avrs, colname):
    data = accumulate_meta(avrs, colname)
    
    timesteps, complexities = get_meta_bounds(data)

    tables_meta = common_functions.compute_avr(data,
                                               timesteps,
                                               complexities)

    # save to temp file for later plotting
    path = '/tmp/meta-%s-%d.plt' % (colname, os.getpid())
    datalib.write(path, tables_meta)

    avrs['meta-'+colname] = {path: tables_meta}

####################################################################################
###
### CLASS IncompatibleTimestepsError()
###
####################################################################################
class IncompatibleTimestepsError(Exception):
    pass

####################################################################################
###
### FUNCTION accumulate_meta()
###
####################################################################################
def accumulate_meta(avrs, colname):
    assert(len(avrs['std']) >= 2)

    data = {}
    alltimesteps = []

    # accumlate values in dictionary mess
    for path, tables_std in avrs['std'].items():
        timesteps = []
        alltimesteps.append(timesteps)

        for c, table in tables_std.items():
            addt = len(timesteps) == 0

            for row in table.rows():
                t = row.get('Timestep')
                if addt:
                    timesteps.append(t)
                try:
                    tdata = data[t]
                except:
                    tdata = data[t] = {}

                try:
                    cdata = tdata[c]
                except:
                    cdata = tdata[c] = []

                cdata.append(row.get(colname))

    # determine which timesteps are in all runs
    timesteps = []
    for t in alltimesteps[0]:
        valid = True
        for timesteps_other in alltimesteps[1:]:
            if not t in timesteps_other:
                valid = False
                break

        if valid:
            timesteps.append(t)

    if len(timesteps) < 1:
        raise IncompatibleTimestepsError()

    timesteps.sort()

    # remove any timesteps not in common
    for t, tdata in data.items():
        if not t in timesteps:
            del data[t]

    # normalize data
    for t, tdata in data.items():
        for c in tdata.keys():
            cdata = tdata[c]
            cdata = complexity_common.normalize_complexities(cdata)
            tdata[c] = cdata

    return data

####################################################################################
###
### FUNCTION get_meta_bounds()
###
####################################################################################
def get_meta_bounds(data):                
    timesteps = list(data.keys())
    timesteps.sort()
    complexities = data[timesteps[0]].keys()

    return timesteps, complexities

####################################################################################
###
### FUNCTION create_curves()
###
####################################################################################
def create_curves(doc,
                  plot,
                  colordict,
                  pathdict,
                  recent_type,
                  options,
                  classname,
                  table):
    gopts = options['global']
    smooth = gopts.get('smooth')
    points = gopts.get('points')
    options = options[classname]
    path = table.path
    meta = classname.startswith('meta')

    if smooth and points:
        warn("Cannot show points with smooth curves.")
        gopts.set('points', False) # prevent multiple warnings
        

    #---
    #--- FUNCTION __style()
    #---
    def __style(curvetype):
        if meta:
            groupname = 'meta'
        else:
            groupname = path

        try:
            group = plot.getStyleGroup(groupname)
        except KeyError:
            if meta:
                group = plot.createStyleGroup(groupname,
                                              plotlib.StyleGroup.SOLID,
                                              plotlib.StyleGroup.THICK)
            else:
                group = plot.createStyleGroup(groupname)

        colorkey = curvetype + '-' + table.name

        if not colorkey in colordict.keys():
            style = group.createStyle()
            colordict[colorkey] = style.color
            plot.reserveColor(style.color)
        else:
            color = colordict[colorkey]
            style = group.createStyle(color)
        
        return style
    #---

    #---
    #--- FUNCTION __title()
    #---
    def __title(name):
        if name != 'whiskers':
            title = name + ' ' + table.name
        else:
            title = table.name

        if meta:
            title = 'Meta-' + title
        else:
            if pathdict != None:
                title += ' (' + pathdict[run_path(table.path, recent_type)] + ')'
        return title
    #---

    if options.get('whiskers'):
        style = __style('whiskers')

        if options.get('mean') or options.get('max'):
            warn('Cannot show whiskers and mean/max curves.')
            options.set('mean', False)
            options.set('max', False)
        
        plot.createCandlestickCurve(table,
                                    __title('whiskers'),
                                    'Timestep',
                                    'q1',
                                    'min',
                                    'max',
                                    'q3',
                                    plotlib.CandlestickCurve.WHISKERS,
                                    style)

        plot.createCandlestickCurve(table,
                                    None,
                                    'Timestep',
                                    'median',
                                    'median',
                                    'median',
                                    'median',
                                    not plotlib.CandlestickCurve.WHISKERS,
                                    style)
    else:
        if options.get('mean'):
            style = __style('mean')
            
            curve = plot.createCurve(table,
                                     __title('Mean'),
                                     'Timestep',
                                     'mean',
                                     style,
                                     smooth)
            curve.points = points
            
            if options.get('errorbars'):
                plot.createErrorbarCurve(table,
                                         None,
                                         'Timestep',
                                         'mean',
                                         'mean_stderr',
                                         style)
                                    
        if options.get('max'):
            style = __style('max')

            if meta:
                col = 'mean'
            else:
                col = 'max'
            
            curve = plot.createCurve(table,
                                     __title('Max'),
                                     'Timestep',
                                     col,
                                     style,
                                     smooth)
            curve.points = points

####################################################################################
###
### FUNCTION show_usage()
###
####################################################################################
def show_usage(msg = None):
#-------------------------------------------------------------------------------
	print """\
USAGE 

     %s [<options>]... (%s) <directory>...

DESCRIPTION

     Plots the Olafcomplexity from one or more Polyworld run/ directories.

     Directory arguments can specify a run directory or the parent of one or
  more run directories.

     Note that all 'meta' averages can only be calculated if more than one run
  is specified. Meta-averages are computed only for those timesteps which exist
  for all runs.

OPTIONS

     -C <C>[,<C>]...
               Plot NeuralComplexity across one or more 'C' neuron types,
            where C can be a composite of types (e.g. HB). Multiple C specs are
            separated by commas (e.g. -C P,HB,I).
            (default P)

     -o <path>
               Specify path of generated plot document.

     -m/M, --mean/Mean
               Plot mean/meta-mean of each complexity type. (default -m on)

     -x/X, --max/Max
               Plot max/meta-max of each complexity type.

     -e/E, --err/Err
               Draw Standard Error bars for the mean/meta-mean.

     -w/W, --whiskers/Whiskers
               Box-and-Whiskers plot of run/meta-average.

     -p, --points
               Draw points on mean and max lines.

     -s, --smooth
               Generate smooth curves.

     -l, --nolegend
               Do not display a legend.

     -v, --noview
               Do not show document in default viewer.

     -c, --nocolor
               Do not use color.

     --title <title>
               Specify title of graph, optionally with macros (see below).

     --xlabel <label>
               Specify label of x-axis, optionally with macros (see below).

     --ylabel <label>
               Specify label of y-axis, optionally with macros (see below).

MACROS

        Macros are allowed in the title, xlabel, and ylabel options. Their
     names must be enclosed within {}.

     Available macros:

     TITLE              Standard title

     XLABEL             Standard x-axis label

     YLABEL             Standard y-axis label

     ARG_DIRS           List of paths passed to script with redundant path info
                     stripped.

     ARG_PATHS          List of paths passed to script with no modification.

     RUN_DIRS           List of run directory paths with redundant path info
                     stripped.

     RUN_PATHS          List of run directory paths with no modification.

     RECENT             Name of recent type (e.g. Recent, bestRecent)

     COMPLEXITY_TYPES   List of complexity types in abbreviated form.

     COMPLEXITY_NAMES   List of complexity types in user-friendly form.""" % (sys.argv[0],
                                                                              '|'.join(RECENT_TYPES))
#-------------------------------------------------------------------------------

        if msg:
            print "--------------------------------------------------------------------------------"
            print
            print 'Error!', msg
	sys.exit(1)

####################################################################################
###
### Primary Code Path
###
####################################################################################

exit_value = main()

sys.exit(exit_value)
