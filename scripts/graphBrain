#!/usr/bin/env python
################################################################################################################################################
# Things you might want to configure
################################################################################################################################################
DOT='/usr/local/graphviz/bin/dot'
GRAPH_FORMAT="pdf"       # pdf, png, etc.
IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN=0.20
DOTFILE_PARAMS="""
nodesep=0.2;                            // minimum node separation (in inches).
center=true;                            // center the graph on the page
//clusterrank=local			  // currently experimenting with this in attempts to get rid of the warnings
node [fontname=Helvetica, shape=doublecircle];         //this is the default style that will be used for all internal neurons
edge [arrowhead=dot];               //sametail seems like it would be nice, but it puts arrows going inside the trapezoids -- lame.
rankdir=BT;                     // Print from bottom to top
labeljust="l"			// label goes on the Left
labelloc="t"			// label goes on the Top
"""
styles_behaviorneurons='height=0.75, shape=tripleoctagon, color="slategray1", style=filled'
styles_rgbinputneurons='style=filled, label="", shape=triangle, style=diagonals, style=rounded, constraint=false' # the constraint stops graphviz from whining
styles_randandenergyneuron='shape=diamond, style=filled, color="beige", width=1.5'
styles_internalneurons_excitatory='color="palegreen1", style=filled'
styles_internalneurons_inhibitory='color="pink", style=filled'        
styles_biasneuron='shape=diamond, style=filled, color="beige", label="\ bias\ ", width=1.5'
MAX_ARROWSIZE = 3.5		# to determine the arrowsize, the weights are continuously mapped onto the set: [0,MAX_ARROWSIZE]
################################################################################################################################################
# Some global variables.  You could change these, but it's probably a bad idea.
################################################################################################################################################
import sys, getopt, os.path, re, os, copy, math
tempfilename = "/tmp/,graphBrain_%s.dot" % ( os.getpid() )
WEIGHT_STYLES=('dotted', 'dashed','solid','bold')
BEHAVIOR_NEURONS = ('eat', 'mate', 'fight', 'speed', 'yaw', 'light', 'focus') # in the order they are neuronally
HEADERDATA = {}
KEEP_DEADEND_NEURONS=False
WEIGHT_THRESHOLD_METHOD='FORCED'
ARROW_MULTIPLIER = MAX_ARROWSIZE**2 - 1
edges = []
# Don't change anything beneath here unless you know what you're doing
################################################################################################################################################
# This function prints out the help information
################################################################################################################################################
def print_usage_and_exit():
        print """
USAGE 
       graphBrain brainAnatomyfile

DESCRIPTION
       graphBrain uses graphviz to make a directed graph of a polyworld brain from its brainAnatomy file.
       It takes a single argument, a brainAnatomy file.

OPTIONS
       -t<x>   Threshold.  Ignore all connections with absolute value less than x.  Default threshold=%s

       -k      Keep dead-end neurons.  By default "dead-end neurons", neurons that have no connections
               greater than Threshold coming out of them are removed from the graph.  This lets you display
               the connections to the dead-end neurons.  Deadends are colored in white. (default off)

       -l{pnf} There are 4 different linestyles (dotted, dashed, solid, and bolid).  This option determines
               how weights are assigned to a linestyle.
               
               '-p': "Pure" -- bins are simple and pure, that is: [ 0, .25, .5, .75 ]
               '-n': "Normalized" -- after thresholding, bins are normalized between the min/max edgeweights.  [ min, (max-min)*.25, (max-min)*.5, (max-min)*.75 ]
               '-f': "Forced" -- Alter the bins such that an approximately equal number of edges are in each bin. (default)

	""" % ( IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN )
	sys.exit(1)
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
def check_parameters( argv ):
	global HEADERDATA, BEHAVIOR_NEURONS, tempfilename, IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN, WEIGHT_THRESHOLDS, KEEP_DEADEND_NEURONS, WEIGHT_THRESHOLD_METHOD

	if os.path.isfile( tempfilename ):
		print "* Warning: tempfile '%s' already exists.  Deleting it." % (tempfilename)
		os.remove( tempfilename )		# if our tempfile is already in use, get rid of it.

	try: opts, args = getopt.getopt( argv, "kt:l:")
	except getopt.GetoptError: print_usage_and_exit() 

#	print "opts=%s" % ( opts )
#	print "args=%s" % ( args)

	for opt in opts:
		if '-t' in opt: IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN = float(opt[1])
		elif '-k' in opt: KEEP_DEADEND_NEURONS = True
		elif '-l' in opt:
			if 'p'   in opt:
				WEIGHT_THRESHOLD_METHOD = 'PURE'
			elif 'n' in opt:
				WEIGHT_THRESHOLD_METHOD = 'NORMALIZED'
			elif 'f' in opt:
				WEIGHT_THRESHOLD_METHOD = 'FORCED'
			else:
				print "* Error: Do not know parameter '%s'." % (opt[1])
				print_usage_and_exit()
	filename=args[0]

	try:
		brainAnatomyfile=open( filename )		# check to make sure the file really is a brainAnatomy file
		templines = brainAnatomyfile.readlines()
		BAnumlines = len( templines ) - 1	# the - 1 is to subtract the headerline
		firstline = templines[0].rstrip('\n')
		brainAnatomyfile.close()			# done with the file for now.

#		print "- headerline='%s'" % (firstline)
		if not firstline.startswith('brain '):
			print "* Error: '%s' is not a polyworld brainAnatomy file." % (filename)
			sys.exit(1)
	except IOError:
		print "* Error: There was no file '%s'" % (filename)

	firstline = firstline.split(' ')
	for param in firstline:
		if '=' not in param: continue		# if there is no equals, skip this entry
		pname, pvalue = param.split('=')
		
		# do some filtering here before putting the values into our headerdata 
		if pname == 'numneurons+1':
			pname = 'numneurons'
			pvalue = int(pvalue)		# numneurons is special, it needs to be an int
		elif pname in ('redinput','greeninput','blueinput'):
			firstindex, lastindex = map(int, pvalue.split('-') )	# get #-#.  These are also special, and should be ints
			pvalue = range( firstindex, lastindex + 1)		# + 1 is because the range in the firstline is inclusive
		else:
			pvalue = float(pvalue)
		# finished filtering

		HEADERDATA[pname] = pvalue
	# now to tack on some values into HEADERDATA at the end:
	firstoutputneuron = max(HEADERDATA['blueinput']) + 1
	HEADERDATA['randneuron'] = 0
	HEADERDATA['energyneuron'] = 1
	HEADERDATA['biasneuron'] = HEADERDATA['numneurons'] - 1
	HEADERDATA['inputneurons'] = range( 0, firstoutputneuron )	# + 1 because the highest index is inclusive
	HEADERDATA['outputneurons'] = range( firstoutputneuron, firstoutputneuron + len(BEHAVIOR_NEURONS) )
	HEADERDATA['internalneurons'] = range( firstoutputneuron + len(BEHAVIOR_NEURONS), HEADERDATA['numneurons'] - 1 ) # the -1 is to not get the biasneuron
	HEADERDATA['noninputneurons'] = range( firstoutputneuron, HEADERDATA['numneurons'] - 1 ) # -1 is to not get the biasneuron
	HEADERDATA['neurons'] = range( 0, HEADERDATA['numneurons'] )

	for i in range(len(BEHAVIOR_NEURONS)): 				# define the index for each behavior neuron
		HEADERDATA[ BEHAVIOR_NEURONS[i] ] = firstoutputneuron + i

	if HEADERDATA['numneurons'] != BAnumlines:
		print "* Error: I saw %s lines in file '%s', but the headerline says there are %s neurons." % ( BAnumlines, filename, HEADERDATA['numneurons'] )
		sys.exit(1)

#	for element in HEADERDATA: print "element=%s value=%s" % (element, HEADERDATA[element])
	
	return filename

########################################################################################################################################################
# make_weight_thresholds - given the matrix it calculates the weight thresholds such that an equal number of edges will be placed into each bin.
########################################################################################################################################################
def make_weight_thresholds( CXN_MATRIX ):
	global HEADERDATA, IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN, WEIGHT_STYLES, WEIGHT_THRESHOLD_METHOD

	if WEIGHT_THRESHOLD_METHOD == 'PURE':
		thresholds=[0.0, 0.25, 0.5, 0.75]	       # (0, 0.25]: dotted // (0.25, 0.5]: dashed // (0.5,0.75]: solid // (0.75,1.0]: bold
		return thresholds

	for i in HEADERDATA['neurons']:
		for j in HEADERDATA['neurons']:
			if abs(CXN_MATRIX[i][j]) > IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN:
				edges.append( abs(CXN_MATRIX[i][j]) )

	maximum, minimum = ( max(edges), min(edges) )
	weightspan = maximum - minimum

	if WEIGHT_THRESHOLD_METHOD == 'NORMALIZED':
		binwidth = weightspan / 4.0
		thresholds = [ IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN, minimum + binwidth, minimum + binwidth*2, minimum + binwidth*3 ]
		return thresholds

	edges.append( IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN )	# ugly hack to make the edge-cases right
	edges.sort()

	numedges, numbins = ( len(edges) - 1, len(WEIGHT_STYLES) )	# the - 1 is required to cancel out the appended IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN
	
#	print "numedges=%s edges=%s" % ( numedges, edges )
	edges_in_bins = [int(numedges / numbins)] * numbins
	
	remainder = numedges % sum(edges_in_bins)

	for i in range(remainder):		# starting at the lowerest bin, increment numedges in each bin until all of the remainders are gone
		edges_in_bins[i] += 1

#	print "edges_in_bins=%s" % (edges_in_bins)
	edgeindices = []
	for i in range(numbins):
		edgeindices.append( sum(edges_in_bins[:i]) )

#	print "edgeindices=%s" % ( edgeindices)
	thresholds=[]
	for edgeindex in edgeindices: thresholds.append( edges[edgeindex] )

	return thresholds
########################################################################################################################################################
# remove_deadends_from_cxnmatrix - removes any dead strands from the matrix.
########################################################################################################################################################
def remove_deadends_from_cxnmatrix( PRUNED_MATRIX ):
	deadends = []
	
	while 1:	# run this loop at least once...
		old_deadendsize=len(deadends)
#		print "Beginning a pass... len(deadends)=%s deadends=%s" % (len(deadends), deadends)

		for fromneuron in HEADERDATA['internalneurons']:	# only internal neurons can be deadends
			found_outboundcxn=False
			for toneuron in HEADERDATA['noninputneurons']:
				if abs(PRUNED_MATRIX[toneuron][fromneuron]) > IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN:
					found_outboundcxn=True
					break

			if not found_outboundcxn and fromneuron not in deadends:		# fromneuron is indeed a deadend neuron, and isn't already in deadends
				deadendneuron = fromneuron
				#print "- %s is deadend." % ( deadendneuron )

				# set all connections FROM the deadend to Zero
				for toneuron in HEADERDATA['noninputneurons']: PRUNED_MATRIX[toneuron][deadendneuron] = 0.0
				# set all connections TO the deadend to Zero
				for fromneuron in HEADERDATA['neurons']: PRUNED_MATRIX[deadendneuron][fromneuron] = 0.0
				deadends.append( deadendneuron )	# add deadendneuron to the list

		# if no more deadends, break the while
		if len(deadends) == old_deadendsize:
			break		
	
	deadends.sort()			# sort the deadends once we've finished

	return PRUNED_MATRIX, deadends

########################################################################################################################################################
# REAL PROGRAM BEGINS HERE
########################################################################################################################################################
filename = check_parameters( sys.argv[1:] )                # don't send it the first item in the sys.argv list because that's this programs filename

print "- Ignoring weights <= %s " % (IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN)
# read the inputfile
BAfile = open(filename)
filelines = BAfile.readlines()
BAfile.close()

# clean up the input file (remove the headerline, remove the newlines)
filelines.pop(0)
for i in range(len(filelines)):
	filelines[i] = filelines[i].rstrip('; \n')
# finished cleaning up the inputlines

# Now to make our connection matrix
CXN_MATRIX = []		# this will hold the connection matrix
for i in range( len(filelines) ):	# for each line in the brainFunction file...
	CXN_MATRIX.append( map(float, filelines[i].split(' ')) ) # split up each fileline by spaces, and convert the values to a float
#	print "%s=%s" % ( i, filelines[i].split(' ') )



# if KEEP_DEAD_NEURONS is on, this will still determine the deadendneurons for coloring purposes but the CXN_MATRIX will be unaltered.
tempCXN_MATRIX = copy.deepcopy(CXN_MATRIX)
PRUNED_MATRIX, deadendneurons = remove_deadends_from_cxnmatrix( tempCXN_MATRIX )
if not KEEP_DEADEND_NEURONS: CXN_MATRIX = PRUNED_MATRIX
else:	del PRUNED_MATRIX

# Now make our Linestyle Weight Thresholds...
WEIGHT_THRESHOLDS  = make_weight_thresholds( CXN_MATRIX )

print "- linestyle thresholds=%s" % (WEIGHT_THRESHOLDS)
# Finished making our connection matrix.  Now to start creating the .dot file

#### First for some stats to give the user an idea how long the graph generation is going to take
print "- deadendneurons=%s" % ( deadendneurons )

# calculate the number of edges that will be printed in this graph
if KEEP_DEADEND_NEURONS: numnodes_to_display = HEADERDATA['numneurons']
else: numnodes_to_display = HEADERDATA['numneurons'] - len( deadendneurons )
numedges=0
for i in HEADERDATA['neurons']:
	for j in HEADERDATA['neurons']:
		if abs(CXN_MATRIX[i][j]) > IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN:
			numedges += 1


print "- numnodes=%s" % (numnodes_to_display)
print "- numedges=%s" % (numedges)
#### Finished printing stats

## Make the label for our graph
graph_label="filename=%s\\nignore weights <= %s\\nfitness=%s\\nmaxWeight=%s\\nmaxBias=%s\\ndeadendneurons=%s (~%s%%)" % ( filename, IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN, HEADERDATA['fitness'], HEADERDATA['maxWeight'], HEADERDATA['maxBias'], len(deadendneurons), len(deadendneurons) * 100 / HEADERDATA['numneurons'] )
## Finished making label for our graph

# create the outputcontents list and put in the basic settings
outputcontents = []	# this list will contain everything we're going to dump to the .dot file
outputcontents.append( 'digraph hierarchy {' )
outputcontents.append( 'label="%s"' % (graph_label) )
outputcontents.append( DOTFILE_PARAMS )

# make the colors and shapes for the randneuron and energyneuron.
#rand_and_energy_styles=', '.join(styles_randandenergyneurons)
for i in (HEADERDATA['randneuron'], HEADERDATA['energyneuron']):
	if i == HEADERDATA['randneuron']: label="random"
	else: label="energy"
	outputcontents.append('%s[ label="%s", %s ];' % ( i, label, styles_randandenergyneuron ) )

# make the colors and shapes for the red, green, and blue input neurons.
for i in HEADERDATA['inputneurons']:
	if i in HEADERDATA['redinput']: color="red"
	elif i in HEADERDATA['blueinput']: color="blue"
	elif i in HEADERDATA['greeninput']: color="green"
	elif i == HEADERDATA['randneuron'] or HEADERDATA['energyneuron']: continue
	else:
		print "* Error: neuron '%s' is supposedly an inputneuron, but it wasn't the random, energy, or within the red/green/blue neurons." % ( i )
		sys.exit(1)
	outputcontents.append( '%s[ color="%s", %s ];' % (i, color, styles_rgbinputneurons) )

# make the color and shape for the bias neuron
outputcontents.append( '%s[ %s ];' % (HEADERDATA['biasneuron'],styles_biasneuron) )


# make the boxes around the red, green, and blue inputneurons
for colorinput in ('redinput','greeninput','blueinput'):
	# make the redinput cluster
	outputcontents.append( 'subgraph cluster%s {' % ( colorinput ) )
	outputcontents.append( '\n'.join(map(str, HEADERDATA[colorinput])) )
	outputcontents.append( 'label="%s";' % (colorinput + 's') )
	outputcontents.append( '}')

# make the labels, colors, and shapes for the behavioral neurons
for i in HEADERDATA['outputneurons']:
	index_within_behavior_neurons = i - min(HEADERDATA['outputneurons'])
	label = ( BEHAVIOR_NEURONS[index_within_behavior_neurons] )
	outputcontents.append( '%s[ label="%s", %s ];' % (i, label, styles_behaviorneurons) )


# make the colors for the excitatory and inhibtory neurons.
for fromneuron in HEADERDATA['internalneurons']:

	if fromneuron in deadendneurons: continue;	# if this neuron is a deadend neuron we don't want to color it.

	for toneuron in HEADERDATA['noninputneurons']:
		if toneuron in deadendneurons: continue; # if this fromneuron only has cxns to deadendneurons, we dont want to color it
		if abs(CXN_MATRIX[toneuron][fromneuron]) <= IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN: continue;

		elif CXN_MATRIX[toneuron][fromneuron] > 0.0: 	# fromneuron is EXCITATORY
			outputcontents.append('%s[ %s ] ' % (fromneuron, styles_internalneurons_excitatory) )
#			print "neuron '%s' is EXCITATORY" % (fromneuron )
			break
		elif CXN_MATRIX[toneuron][fromneuron] < 0.0:	# fromneuron is INHIBITORY
			outputcontents.append('%s[ %s ] ' % (fromneuron, styles_internalneurons_inhibitory) )
#			print "neuron '%s' is INHIBITORY" % ( fromneuron )
			break

# Put the inputneurons as the source and the output neurons as the sink
outputcontents.append("{rank=source; %s }" % ( ' '.join(map(str,HEADERDATA['inputneurons'] + [HEADERDATA['biasneuron']]))  ))
outputcontents.append("{rank=sink; %s }" %  ( ' '.join( map(str,HEADERDATA['outputneurons']))  ))

weightstest={}
for line in WEIGHT_STYLES:
	weightstest[line] = []

# Make the connections
for toneuron in range( HEADERDATA['numneurons'] ):
	for potential_fromneuron in range( HEADERDATA['numneurons'] ):
		# ignore connections less than the threshold.
		if abs(CXN_MATRIX[toneuron][potential_fromneuron]) <= IGNORE_CONNECTIONS_WITH_ABSWEIGHT_LESS_THAN: continue;
		
		edgeweight = abs(CXN_MATRIX[toneuron][potential_fromneuron])
		# now to determine the bin for this connection
		numbins = len(WEIGHT_STYLES)
		for i in range(numbins-1,-1,-1):		# begin at the highest index and work our way down to 0.  For i in 3...0
			if edgeweight > WEIGHT_THRESHOLDS[i]:
				weight, style = ( i + 1, WEIGHT_STYLES[i] ) # weight is a value from 4...1
				arrowsize = edgeweight * MAX_ARROWSIZE
				weightstest[style].append( edgeweight )
#				print "weight=%s arrowsize=%s" % ( edgeweight, arrowsize)
				break
		# Okay, we got our weight, now what color is it?
		if CXN_MATRIX[toneuron][potential_fromneuron] > 0.0:	color='green'
		elif CXN_MATRIX[toneuron][potential_fromneuron] < 0.0:	color='red'
		
		# and now to print it.
		outputcontents.append( '{ %s }->%s [weight=%s, style=%s, color=%s, arrowsize=%s ];' % ( potential_fromneuron,toneuron,weight,style,color,arrowsize ) )

outputcontents.append( '}' )

for weight in ('dotted','dashed','solid','bold'):
	weightstest[weight].sort()
	print "-- %s edges=%s" % ( weight, len(weightstest[weight]) )

# print "===============\n%s\n=============" % ( '\n'.join(outputcontents) )

outputfile = open( tempfilename, 'w' )
outputfile.write( '\n'.join(outputcontents) )
outputfile.close()

print "- Made tempfile '%s', making graph..." % ( tempfilename )
os.system( "%s %s -T%s -o %s" % (DOT,tempfilename, GRAPH_FORMAT, tempfilename + '.' + GRAPH_FORMAT) )
os.system("open %s" % (tempfilename + '.' + GRAPH_FORMAT) )
print "Done!"



