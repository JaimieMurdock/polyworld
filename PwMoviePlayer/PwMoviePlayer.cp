// System#include <libc.h>#include <stdio.h>#include <gl.h>#include <sys/types.h>#include <sys/param.h>#include <ctype.h>#include <stdarg.h>#include <stream.h>#include <signal.h>#include <math.h>// Qt#include <QApplication>#include <QGLFormat>#include <QTimer>// Self#include "PwMoviePlayer.h"#include "PwMovieTools.h"#include "MainWindow.h"char defaultMovieFileName[] = "movie.pmv";int main( int argc, char **argv ){//	Q_INIT_RESOURCE(application);	// It is important the we have OpenGL support    if (!QGLFormat::hasOpenGL())    {		qWarning("This system has no OpenGL support. Exiting.");		return -1;    }		// Create application instance	PMPApp app( argc, argv );		return( app.exec() );};//===========================================================================// PMPApp//===========================================================================//---------------------------------------------------------------------------// PMPApp::PMPApp//---------------------------------------------------------------------------PMPApp::PMPApp(int argc, char** argv) : QApplication(argc, argv){    char *movieFileName = NULL;    if (movieFileName == NULL)        movieFileName = defaultMovieFileName;    mainMovieFile = fopen( movieFileName, "rb" );    if( !mainMovieFile )	{        fprintf( stderr, "unable to open movie file \"%s\"\n", movieFileName );        exit(1);    }	// Establish how are preference settings file will be named	QCoreApplication::setOrganizationDomain( "indiana.edu" );	QCoreApplication::setApplicationName( "pwmovieplayer" );		mainWindow = new MainWindow( "Polyworld MoviePlayer", "Main", 0, mainMovieFile );	mainWindow->show();		// Create playback timer	QTimer* idleTimer = new QTimer( mainWindow );	connect( idleTimer, SIGNAL( timeout() ), this, SLOT( NextFrame() ) );	idleTimer->start( 0 );}//---------------------------------------------------------------------------// PMPApp::PMPApp//---------------------------------------------------------------------------PMPApp::~PMPApp(){	fclose( mainMovieFile );}//---------------------------------------------------------------------------// PMPApp::NextFrame()//---------------------------------------------------------------------------void PMPApp::NextFrame(){	static unsigned long frame;	frame++;#if 0	if( frame == 3 )	{		mainWindow->dumpObjectTree();		mainWindow->menuBar()->dumpObjectTree();	}#endif		mainWindow->NextFrame();}